// Generated by Haxe 3.4.2
package hxDaedalus.data.graph;

@SuppressWarnings(value={"rawtypes"})
public class Graph extends haxe.lang.HxObject
{
	static
	{
		hxDaedalus.data.graph.Graph.INC = 0;
	}
	
	public Graph(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Graph()
	{
		hxDaedalus.data.graph.Graph.__hx_ctor_hxDaedalus_data_graph_Graph(this);
	}
	
	
	public static void __hx_ctor_hxDaedalus_data_graph_Graph(hxDaedalus.data.graph.Graph __hx_this)
	{
		__hx_this._id = hxDaedalus.data.graph.Graph.INC;
		hxDaedalus.data.graph.Graph.INC++;
	}
	
	
	public static int INC;
	
	
	
	public int get_id()
	{
		return this._id;
	}
	
	
	
	
	public hxDaedalus.data.graph.GraphEdge get_edge()
	{
		return this._edge;
	}
	
	
	
	
	public hxDaedalus.data.graph.GraphNode get_node()
	{
		return this._node;
	}
	
	
	public int _id;
	
	public hxDaedalus.data.graph.GraphNode _node;
	
	public hxDaedalus.data.graph.GraphEdge _edge;
	
	public void dispose()
	{
		while (( this._node != null ))
		{
			this.deleteNode(this._node);
		}
		
	}
	
	
	public hxDaedalus.data.graph.GraphNode insertNode()
	{
		hxDaedalus.data.graph.GraphNode node = new hxDaedalus.data.graph.GraphNode();
		if (( this._node != null )) 
		{
			node.set_next(this._node);
			this._node.set_prev(node);
		}
		
		this._node = node;
		return node;
	}
	
	
	public void deleteNode(hxDaedalus.data.graph.GraphNode node)
	{
		while (( node.get_outgoingEdge() != null ))
		{
			if (( node.get_outgoingEdge().get_oppositeEdge() != null )) 
			{
				this.deleteEdge(node.get_outgoingEdge().get_oppositeEdge());
			}
			
			this.deleteEdge(node.get_outgoingEdge());
		}
		
		hxDaedalus.data.graph.GraphNode otherNode = this._node;
		hxDaedalus.data.graph.GraphEdge incomingEdge;
		while (( otherNode != null ))
		{
			incomingEdge = ((hxDaedalus.data.graph.GraphEdge) (otherNode.get_successorNodes().get(node)) );
			if (( incomingEdge != null )) 
			{
				this.deleteEdge(incomingEdge);
			}
			
			otherNode = otherNode.get_next();
		}
		
		if (( this._node == node )) 
		{
			if (( node.get_next() != null )) 
			{
				node.get_next().set_prev(null);
				this._node = node.get_next();
			}
			else
			{
				this._node = null;
			}
			
		}
		else
		{
			if (( node.get_next() != null )) 
			{
				node.get_prev().set_next(node.get_next());
				node.get_next().set_prev(node.get_prev());
			}
			else
			{
				node.get_prev().set_next(null);
			}
			
		}
		
		node.dispose();
	}
	
	
	public hxDaedalus.data.graph.GraphEdge insertEdge(hxDaedalus.data.graph.GraphNode fromNode, hxDaedalus.data.graph.GraphNode toNode)
	{
		if (( fromNode.get_successorNodes().get(toNode) != null ))
		{
			return null;
		}
		
		hxDaedalus.data.graph.GraphEdge edge = new hxDaedalus.data.graph.GraphEdge();
		if (( this._edge != null )) 
		{
			this._edge.set_prev(edge);
			edge.set_next(this._edge);
		}
		
		this._edge = edge;
		edge.set_sourceNode(fromNode);
		edge.set_destinationNode(toNode);
		fromNode.get_successorNodes().set(toNode, edge);
		if (( fromNode.get_outgoingEdge() != null )) 
		{
			fromNode.get_outgoingEdge().set_rotPrevEdge(edge);
			edge.set_rotNextEdge(fromNode.get_outgoingEdge());
			fromNode.set_outgoingEdge(edge);
		}
		else
		{
			fromNode.set_outgoingEdge(edge);
		}
		
		hxDaedalus.data.graph.GraphEdge oppositeEdge = ((hxDaedalus.data.graph.GraphEdge) (toNode.get_successorNodes().get(fromNode)) );
		if (( oppositeEdge != null )) 
		{
			edge.set_oppositeEdge(oppositeEdge);
			oppositeEdge.set_oppositeEdge(edge);
		}
		
		return edge;
	}
	
	
	public void deleteEdge(hxDaedalus.data.graph.GraphEdge edge)
	{
		if (( this._edge == edge )) 
		{
			if (( edge.get_next() != null )) 
			{
				edge.get_next().set_prev(null);
				this._edge = edge.get_next();
			}
			else
			{
				this._edge = null;
			}
			
		}
		else
		{
			if (( edge.get_next() != null )) 
			{
				edge.get_prev().set_next(edge.get_next());
				edge.get_next().set_prev(edge.get_prev());
			}
			else
			{
				edge.get_prev().set_next(null);
			}
			
		}
		
		if (( edge.get_sourceNode().get_outgoingEdge() == edge )) 
		{
			if (( edge.get_rotNextEdge() != null )) 
			{
				edge.get_rotNextEdge().set_rotPrevEdge(null);
				edge.get_sourceNode().set_outgoingEdge(edge.get_rotNextEdge());
			}
			else
			{
				edge.get_sourceNode().set_outgoingEdge(null);
			}
			
		}
		else
		{
			if (( edge.get_rotNextEdge() != null )) 
			{
				edge.get_rotPrevEdge().set_rotNextEdge(edge.get_rotNextEdge());
				edge.get_rotNextEdge().set_rotPrevEdge(edge.get_rotPrevEdge());
			}
			else
			{
				edge.get_rotPrevEdge().set_rotNextEdge(null);
			}
			
		}
		
		edge.dispose();
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			switch (field.hashCode())
			{
				case 94650:
				{
					if (field.equals("_id")) 
					{
						this._id = ((int) (value) );
						return value;
					}
					
					break;
				}
				
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			switch (field.hashCode())
			{
				case 90842780:
				{
					if (field.equals("_edge")) 
					{
						this._edge = ((hxDaedalus.data.graph.GraphEdge) (value) );
						return value;
					}
					
					break;
				}
				
				
				case 94650:
				{
					if (field.equals("_id")) 
					{
						this._id = haxe.lang.Runtime.toInt(value);
						return value;
					}
					
					break;
				}
				
				
				case 91121377:
				{
					if (field.equals("_node")) 
					{
						this._node = ((hxDaedalus.data.graph.GraphNode) (value) );
						return value;
					}
					
					break;
				}
				
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			switch (field.hashCode())
			{
				case 1764137480:
				{
					if (field.equals("deleteEdge")) 
					{
						return new haxe.lang.Closure(this, "deleteEdge");
					}
					
					break;
				}
				
				
				case 3355:
				{
					if (field.equals("id")) 
					{
						return this.get_id();
					}
					
					break;
				}
				
				
				case 965713942:
				{
					if (field.equals("insertEdge")) 
					{
						return new haxe.lang.Closure(this, "insertEdge");
					}
					
					break;
				}
				
				
				case -1249338716:
				{
					if (field.equals("get_id")) 
					{
						return new haxe.lang.Closure(this, "get_id");
					}
					
					break;
				}
				
				
				case 1764416077:
				{
					if (field.equals("deleteNode")) 
					{
						return new haxe.lang.Closure(this, "deleteNode");
					}
					
					break;
				}
				
				
				case 3108285:
				{
					if (field.equals("edge")) 
					{
						return this.get_edge();
					}
					
					break;
				}
				
				
				case 965992539:
				{
					if (field.equals("insertNode")) 
					{
						return new haxe.lang.Closure(this, "insertNode");
					}
					
					break;
				}
				
				
				case 1976220934:
				{
					if (field.equals("get_edge")) 
					{
						return new haxe.lang.Closure(this, "get_edge");
					}
					
					break;
				}
				
				
				case 1671767583:
				{
					if (field.equals("dispose")) 
					{
						return new haxe.lang.Closure(this, "dispose");
					}
					
					break;
				}
				
				
				case 3386882:
				{
					if (field.equals("node")) 
					{
						return this.get_node();
					}
					
					break;
				}
				
				
				case 90842780:
				{
					if (field.equals("_edge")) 
					{
						return this._edge;
					}
					
					break;
				}
				
				
				case 1976499531:
				{
					if (field.equals("get_node")) 
					{
						return new haxe.lang.Closure(this, "get_node");
					}
					
					break;
				}
				
				
				case 91121377:
				{
					if (field.equals("_node")) 
					{
						return this._node;
					}
					
					break;
				}
				
				
				case 94650:
				{
					if (field.equals("_id")) 
					{
						return this._id;
					}
					
					break;
				}
				
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		{
			boolean __temp_executeDef1 = true;
			switch (field.hashCode())
			{
				case 94650:
				{
					if (field.equals("_id")) 
					{
						return this._id;
					}
					
					break;
				}
				
				
				case 3355:
				{
					if (field.equals("id")) 
					{
						return this.get_id();
					}
					
					break;
				}
				
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		{
			boolean __temp_executeDef1 = true;
			switch (field.hashCode())
			{
				case 1764137480:
				{
					if (field.equals("deleteEdge")) 
					{
						__temp_executeDef1 = false;
						this.deleteEdge(((hxDaedalus.data.graph.GraphEdge) (dynargs.__get(0)) ));
					}
					
					break;
				}
				
				
				case -1249338716:
				{
					if (field.equals("get_id")) 
					{
						return this.get_id();
					}
					
					break;
				}
				
				
				case 965713942:
				{
					if (field.equals("insertEdge")) 
					{
						return this.insertEdge(((hxDaedalus.data.graph.GraphNode) (dynargs.__get(0)) ), ((hxDaedalus.data.graph.GraphNode) (dynargs.__get(1)) ));
					}
					
					break;
				}
				
				
				case 1976220934:
				{
					if (field.equals("get_edge")) 
					{
						return this.get_edge();
					}
					
					break;
				}
				
				
				case 1764416077:
				{
					if (field.equals("deleteNode")) 
					{
						__temp_executeDef1 = false;
						this.deleteNode(((hxDaedalus.data.graph.GraphNode) (dynargs.__get(0)) ));
					}
					
					break;
				}
				
				
				case 1976499531:
				{
					if (field.equals("get_node")) 
					{
						return this.get_node();
					}
					
					break;
				}
				
				
				case 965992539:
				{
					if (field.equals("insertNode")) 
					{
						return this.insertNode();
					}
					
					break;
				}
				
				
				case 1671767583:
				{
					if (field.equals("dispose")) 
					{
						__temp_executeDef1 = false;
						this.dispose();
					}
					
					break;
				}
				
				
			}
			
			if (__temp_executeDef1) 
			{
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		baseArr.push("_edge");
		baseArr.push("_node");
		baseArr.push("_id");
		baseArr.push("node");
		baseArr.push("edge");
		baseArr.push("id");
		super.__hx_getFields(baseArr);
	}
	
	
}


